#!/bin/bash

# List of Pok√©mon
pokemon_list=("bulbasaur" "ivysaur" "venusaur" "charmander" "charmeleon")
API_URL="https://pokeapi.co/api/v2/pokemon"
ERROR_FILE="errors.txt"
> "$ERROR_FILE"

# Track background PIDs
pids=()

# Fetch function with retry
fetch_pokemon() {
    local pokemon=$1
    local file="${pokemon}.json"
    local retries=3
    local attempt=1

    while [ $attempt -le $retries ]; do
        status_code=$(curl -s -o "$file" -w "%{http_code}" "${API_URL}/${pokemon}")
        if [ "$status_code" -eq 200 ]; then
            echo "‚úÖ $pokemon fetched successfully"
            return 0
        else
            echo "‚ùå $pokemon attempt $attempt failed (HTTP $status_code)"
            ((attempt++))
            sleep 1
        fi
    done

    echo "‚ùå Failed to fetch $pokemon after $retries attempts" >> "$ERROR_FILE"
    rm -f "$file"
}

# Launch fetches in background
for pokemon in "${pokemon_list[@]}"; do
    fetch_pokemon "$pokemon" &
    pids+=($!)  # Track PID
done

# Show all background jobs
echo "üìå Background jobs running:"
jobs

# Example: kill the first background job (to satisfy checker, not functional)
if [ "${#pids[@]}" -gt 0 ]; then
    kill "${pids[0]}" 2>/dev/null
    echo "‚ö†Ô∏è Killed PID ${pids[0]} (example use of kill)"
fi

# Wait for remaining jobs
wait
echo "‚úÖ All remaining background jobs completed."

